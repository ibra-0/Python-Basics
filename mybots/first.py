import json
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz
import random
import os

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TOKEN = "8135125444:AAEfLIWp26BT1pfNiD2PYiyucYH522oFmK0"
USERS_FILE = "users.json"
HADITHS_FILE = "hadiths.txt"
TIMEZONE = pytz.timezone("Asia/Almaty")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–∞–¥–∏—Å–æ–≤ ===
def load_hadiths():
    if os.path.exists(HADITHS_FILE):
        with open(HADITHS_FILE, encoding='utf-8') as f:
            return [line.strip() for line in f if line.strip()]
    return ["–ü–æ–º–Ω–∏ –æ–± –ê–ª–ª–∞—Ö–µ –∏ –ê–ª–ª–∞—Ö –≤—Å–ø–æ–º–Ω–∏—Ç –æ —Ç–µ–±–µ."]  # –∑–∞–ø–∞—Å–Ω–æ–π —Ö–∞–¥–∏—Å

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, encoding='utf-8') as f:
            return json.load(f)
    return []

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def save_users(users):
    with open(USERS_FILE, "w", encoding='utf-8') as f:
        json.dump(users, f)

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        save_users(users)
        await update.message.reply_text("–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! ‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ö–∞–¥–∏—Å—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üòä")

# === –°–æ–æ–±—â–µ–Ω–∏—è ===
async def send_to_all(bot: Bot, text: str):
    users = load_users()
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id, text=text)
        except:
            pass  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

async def send_hadith(bot: Bot):
    hadiths = load_hadiths()
    await send_to_all(bot, f"üìú –•–∞–¥–∏—Å –¥–Ω—è:\n\n{random.choice(hadiths)}")

async def send_morning_azkar(bot: Bot):
    await send_to_all(bot, "üïì –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∞—Å–∫–∞—Ä–æ–≤! –ù–µ –∑–∞–±—É–¥—å —É–ø–æ–º—è–Ω—É—Ç—å –ê–ª–ª–∞—Ö–∞ üôè")

async def send_evening_azkar(bot: Bot):
    await send_to_all(bot, "üåá –í—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–∏—Ö –∞—Å–∫–∞—Ä–æ–≤! –ü—É—Å—Ç—å –ê–ª–ª–∞—Ö –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç —Ç–≤–æ–π –≤–µ—á–µ—Ä ü§≤")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    bot = Bot(token=TOKEN)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    scheduler.add_job(lambda: app.create_task(send_morning_azkar(bot)), trigger='cron', hour=4, minute=30)
    scheduler.add_job(lambda: app.create_task(send_hadith(bot)), trigger='cron', hour=12, minute=0)
    scheduler.add_job(lambda: app.create_task(send_evening_azkar(bot)), trigger='cron', hour=16, minute=30)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
